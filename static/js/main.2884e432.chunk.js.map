{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","_useState","useState","_useState2","_slicedToArray","count","setCount","_useState3","_useState4","data","setData","useEffect","fetch","headers","X-RapidAPI-Key","process","X-RapidAPI-Host","then","response","ok","Error","json","result","catch","error","console","quoteText","quoteAuthor","React","createElement","className","id","onClick","href","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"mMA8DeA,MA3Df,WAAe,IAAAC,EACaC,mBAAS,GAAEC,EAAAC,YAAAH,EAAA,GAA9BI,EAAKF,EAAA,GAAEG,EAAQH,EAAA,GAAiBI,EACfL,mBAAS,MAAKM,EAAAJ,YAAAG,EAAA,GAA/BE,EAAID,EAAA,GAAEE,EAAOF,EAAA,GAIpBG,oBAAU,WACRC,MAHa,iDAGC,CACZC,QAAS,CACPC,iBAAkBC,qDAClBC,kBAAmB,6BAGpBC,KAAK,SAACC,GACL,IAAKA,EAASC,GACZ,MAAM,IAAIC,MAAM,+BAElB,OAAOF,EAASG,SAEjBJ,KAAK,SAACK,GACLZ,EAAQY,KAETC,MAAM,SAACC,GACNC,QAAQD,MAAM,gDAAiDA,MAElE,CAACnB,IAEJ,IAAMqB,EAAYjB,EAAOA,EAAc,QAAI,aACrCkB,EAAclB,EAAOA,EAAiB,WAAQ,KAAI,aAExD,OACEmB,IAAAC,cAAA,OAAKC,UAAU,OACbF,IAAAC,cAAA,OAAKE,GAAG,aACNH,IAAAC,cAAA,OAAKC,UAAU,SACbF,IAAAC,cAAA,OAAKE,GAAG,OAAOD,UAAU,cACvBF,IAAAC,cAAA,UAAKH,IAEPE,IAAAC,cAAA,OAAKE,GAAG,SAASD,UAAU,gBACzBF,IAAAC,cAAA,UAAKF,KAGTC,IAAAC,cAAA,OAAKC,UAAU,WACbF,IAAAC,cAAA,UAAQE,GAAG,YAAYC,QAAS,kBAAM1B,EAASD,EAAQ,KAAI,eAI7DuB,IAAAC,cAAA,OAAKC,UAAU,WACbF,IAAAC,cAAA,KAAGE,GAAG,WAAWE,KAAK,cAAa,YAGnCL,IAAAC,cAAA,KAAGE,GAAG,cAAcE,KAAK,4BAA2B,eCzC/CC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxCC,EAAAC,EAAA,GAAArB,KAAAoB,EAAAE,KAAA,UAAqBtB,KAAK,SAAAuB,GAAiD,IAA9CC,EAAMD,EAANC,OAAQC,EAAMF,EAANE,OAAQC,EAAMH,EAANG,OAAQC,EAAMJ,EAANI,OAAQC,EAAOL,EAAPK,QAC3DJ,EAAON,GACPO,EAAOP,GACPQ,EAAOR,GACPS,EAAOT,GACPU,EAAQV,MCDDW,IAASC,WAAWC,SAASC,eAAe,SACpDC,OACHtB,IAAAC,cAACD,IAAMuB,WAAU,KACfvB,IAAAC,cAAC7B,EAAG,QAORkC","file":"static/js/main.2884e432.chunk.js","sourcesContent":["import \"./App.css\";\nimport React, { useState, useEffect } from \"react\";\n\nfunction App() {\n  const [count, setCount] = useState(0); // This is the setState of new react. data is the current data, and setData is the function to update the current state (data). data replaces this.data\n  const [data, setData] = useState(null); // This is the setState of new react. data is the current data, and setData is the function to update the current state (data). data replaces this.data\n\n  const apiUrl = \"https://quotes15.p.rapidapi.com/quotes/random/\";\n\n  useEffect(() => {\n    fetch(apiUrl, {\n      headers: {\n        \"X-RapidAPI-Key\": process.env.REACT_APP_API_KEY,\n        \"X-RapidAPI-Host\": \"quotes15.p.rapidapi.com\",\n      },\n    })\n      .then((response) => {\n        if (!response.ok) {\n          throw new Error(\"Network response was not ok\");\n        }\n        return response.json();\n      })\n      .then((result) => {\n        setData(result); // Set the data in the component's state\n      })\n      .catch((error) => {\n        console.error(\"There was a problem with the fetch operation:\", error);\n      });\n  }, [count]); // The dependency array ensures the request is made when apiUrl changes\n\n  const quoteText = data ? data[\"content\"] : \"Loading...\";\n  const quoteAuthor = data ? data[\"originator\"][\"name\"] : \"Loading...\";\n\n  return (\n    <div className=\"App\">\n      <div id=\"quote-box\">\n        <div className=\"quote\">\n          <div id=\"text\" className=\"quote-text\">\n            <h2>{quoteText}</h2>\n          </div>\n          <div id=\"author\" className=\"quote-author\">\n            <h3>{quoteAuthor}</h3>\n          </div>\n        </div>\n        <div className=\"buttons\">\n          <button id=\"new-quote\" onClick={() => setCount(count + 1)}>\n            Next Quote\n          </button>\n        </div>\n        <div className=\"socials\">\n          <a id=\"fb-quote\" href=\"#quote-box\">\n            Facebook\n          </a>\n          <a id=\"tweet-quote\" href=\"twitter.com/intent/tweet\">\n            Twitter\n          </a>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}